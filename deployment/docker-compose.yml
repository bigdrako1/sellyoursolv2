version: '3.8'

services:
  # API Service
  api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.api
    image: trading-ai-api:${TAG:-latest}
    container_name: trading-ai-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - api_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - trading-network

  # Machine Learning Service
  ml-service:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.ml
    image: trading-ai-ml:${TAG:-latest}
    container_name: trading-ai-ml
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - MODEL_STORAGE_PATH=/app/models
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ml_models:/app/models
      - ml_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - trading-network

  # Agent Service
  agent-service:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.agent
    image: trading-ai-agent:${TAG:-latest}
    container_name: trading-ai-agent
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - ML_SERVICE_URL=http://ml-service:8001
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - agent_logs:/app/logs
    depends_on:
      - mongodb
      - redis
      - ml-service
    networks:
      - trading-network

  # Data Provider Service
  data-provider:
    build:
      context: ..
      dockerfile: deployment/Dockerfile.data
    image: trading-ai-data:${TAG:-latest}
    container_name: trading-ai-data
    restart: unless-stopped
    ports:
      - "8003:8003"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - GLASSNODE_API_KEY=${GLASSNODE_API_KEY}
      - CRYPTOQUANT_API_KEY=${CRYPTOQUANT_API_KEY}
      - INTOTHEBLOCK_API_KEY=${INTOTHEBLOCK_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - data_cache:/app/cache
      - data_logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - trading-network

  # MongoDB Database
  mongodb:
    image: mongo:5.0
    container_name: trading-ai-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    volumes:
      - mongodb_data:/data/db
    networks:
      - trading-network

  # Redis Cache
  redis:
    image: redis:6.2-alpine
    container_name: trading-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - trading-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.21-alpine
    container_name: trading-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
      - ml-service
      - agent-service
      - data-provider
    networks:
      - trading-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.30.3
    container_name: trading-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - trading-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:8.2.2
    container_name: trading-ai-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USERNAME}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - trading-network

volumes:
  api_logs:
  ml_models:
  ml_logs:
  agent_logs:
  data_cache:
  data_logs:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  trading-network:
    driver: bridge
