version: '3.8'

services:
  # Backend Node.js service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=1d
      - HELIUS_API_KEY=${HELIUS_API_KEY}
      - BIRDEYE_API_KEY=${BIRDEYE_API_KEY}
      - MORALIS_API_KEY=${MORALIS_API_KEY}
      - HELIUS_API_BASE=https://api.helius.xyz/v0
      - HELIUS_RPC_URL=https://mainnet.helius-rpc.com
      - BIRDEYE_API_BASE=https://public-api.birdeye.so
      - JUPITER_API_BASE=https://price.jup.ag/v4
      - AGENT_SERVICE_URL=http://trading-agents:8000
      - CORS_ORIGIN=${CORS_ORIGIN}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=sellyoursolv2
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
    depends_on:
      - postgres
      - trading-agents
    networks:
      - app-network
    restart: unless-stopped

  # Frontend React service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_URL=${API_URL}
        - VITE_WS_URL=${WS_URL}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

  # Trading Agents Python service
  trading-agents:
    build:
      context: ./trading_agents
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_DEBUG=False
      - BIRDEYE_API_KEY=${BIRDEYE_API_KEY}
      - MOONDEV_API_KEY=${MOONDEV_API_KEY}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=trading_agents
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - CACHE_TTL=60
      - EXECUTION_SLIPPAGE=0.01
      - EXECUTION_MAX_RETRIES=3
      - EXECUTION_RETRY_DELAY=1.0
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_MULTIPLE_DATABASES=sellyoursolv2,trading_agents
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - app-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
      - trading-agents
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres-data:

networks:
  app-network:
    driver: bridge
